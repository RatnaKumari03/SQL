-- Date: 09 October 2025
-- Uploaded Fact,Location,Product files 

select * from dbo.FactTable
select * from dbo.LocationTable
select * from dbo.ProductTable

-- Tasks to be performed

-- 1. Display the number of states present in the Location Table.
select count(State) from dbo.LocationTable

-- 2. How many products are of regular type?
select count(Product) from dbo.ProductTable
where Type='Regular'

-- 3. How much spending has been done on marketing of product ID 1?
select SUM(Marketing) from dbo.FactTable
where ProductID=1

-- 4. What is the minimum sales of a product?
select min(Sales) from dbo.FactTable

-- 5. Display the max Cost of Good Sold (COGS).
select max(COGS) from dbo.FactTable

-- 6. Display the details of the product where product type is coffee.
select * from dbo.ProductTable
where Product_Type='Coffee'

-- 7. Display the details where total expenses are greater than 40.
select * from dbo.FactTable
where Total_Expenses > 40

-- 8. What is the average sales in area code 719?
select AVG(Sales) from dbo.FactTable
where Area_Code='719'

-- 9. Find out the total profit generated by Colorado state.
select SUM(Profit) as TotalProfit_Colorado
from FactTable as f
JOIN
LocationTable as l 
on f.Area_Code=l.Area_Code
where l.State='Colorado'

-- 10. Display the average inventory for each product ID.
select ProductId,AVG(Inventory) as Avg_Inventory
from FactTable
group by ProductId
order by ProductId asc

-- 11. Display state in a sequential order in a Location Table.
select State from LocationTable
order by State

-- 12. Display the average budget of the Product where the 
--average budget margin should be greater than 100.
select ProductId,AVG(Budget_Margin) as Avg_Budget
from FactTable
Group by ProductId
having AVG(Budget_Margin)>100

select * from FactTable 

-- 13. What is the total sales done on date 2010-01-01?
select sum(Sales) as TotalSales from FactTable
where Date='2010-01-01'

-- 14. Display the average total expense of each product ID on an individual date.
select ProductId,Date,AVG(Total_Expenses) as TotalExpenses 
from FactTable
group by ProductId,Date
order by Date,ProductId

/* 15. Display the table with the following attributes 
  such as date, product ID, product_type, product, sales, 
  profit, state, area_code. */
select f.Date,f.ProductId,p.Product_Type,p.Product,f.Sales,f.Profit,l.State,f.Area_Code from FactTable as f
join
ProductTable as p 
ON f.ProductId=p.ProductId
join
LocationTable as l
ON l.Area_Code=f.Area_Code

-- 16. Display the rank without any gap to show the sales wise rank.
select Sales,
     DENSE_RANK() OVER(Order by Sales) as Sales_Rank
from FactTable

-- 17. Find the state wise profit and sales.
select l.State,SUM(f.Profit) as Total_Profit,
SUM(f.Sales) as Total_Sales
from FactTable as f
join LocationTable as l
on l.Area_Code=f.Area_Code
group by State

-- 18. Find the state wise profit and sales along with the product name.
select l.State,p.Product,
SUM(f.Profit) as Total_Profit,
SUM(f.Sales) as Total_Sales
from FactTable as f
join LocationTable as l
on l.Area_Code=f.Area_Code
join ProductTable as p
on p.ProductId=f.ProductId
group by State,Product

-- 19. If there is an increase in sales of 5%, calculate the increased sales.
select Sales, Sales*1.05 as Sales_Increase
from FactTable

-- 20. Find the maximum profit along with the product ID and producttype.
select p.ProductId,p.Product_Type,MAX(f.Profit) as Max_Profit
from FactTable as f
join ProductTable as p
on f.ProductId=p.ProductId
group by p.ProductId,p.Product_Type

-- 21. Create a stored procedure to fetch the result 
  --according to the product type from Product Table.
create PROCEDURE Get_ProductType
(
  @Product_Type nvarchar(50)
)
as 
BEGIN 
   select * from ProductTable
   where Product_Type=@Product_Type
END

EXEC Get_ProductType @Product_Type='Coffee'

-- 22. Write a query by creating a condition in which if the total expenses is less than 60 
   --then it is a profit or else loss.
select Total_Expenses,
  CASE when Total_Expenses<60 then 'Profit'
 else 'Loss'
 END as ProfitOrLoss
from FactTable

-- 23. Give the total weekly sales value 
--with the date and product ID details.
--Use roll-up to pull the data in hierarchical order.
SELECT Date, ProductId, SUM(Sales) as Weekly_Sales
FROM FactTable
GROUP BY ROLLUP (Date, ProductId)

-- 24. Apply union and intersection operator on 
--the tables which consist of attribute area code.
select Area_Code from FactTable
UNION 
select Area_Code from LocationTable

select Area_Code from FactTable
INTERSECT
select Area_Code from LocationTable

select Area_Code from FactTable
UNION ALL
select Area_Code from LocationTable

-- 25. Create a user-defined function for the product table
--to fetch a particular product type based upon 
--the user's preference.
create or alter FUNCTION fn_ProductType
(
   @Product_Type nvarchar(50)
)
returns nvarchar(50)
as
begin
return(
   select TOP 1 Product_Type from ProductTable
   where Product_Type=@Product_Type
)
end

select dbo.fn_ProductType('Tea')

-- 26. Change the product type from coffee to tea 
--where product ID is 1 and undo it.
UPDATE ProductTable
SET Product_Type='Tea'
where ProductId=1

UPDATE ProductTable
SET Product_Type='Coffee'
where ProductId=1

select * from ProductTable

-- 27. Display the date, product ID and sales 
--where total expenses are between 100 to 200.
select Date,ProductId,Sales
from FactTable
where Total_Expenses between 100 and 200

-- 28. Delete the records in the Product Table for regular type.
delete ProductTable
where Type='Regular'

select * from ProductTable

-- 29. Display the ASCII value of the fifth character
--from the column Product.
select Product, ASCII(SUBSTRING(Product,5,1)) as AsciiValue
from ProductTable

select * from FactTable
select * from LocationTable
select * from ProductTable